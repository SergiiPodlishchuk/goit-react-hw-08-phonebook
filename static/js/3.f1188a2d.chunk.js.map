{"version":3,"sources":["components/ContactForm/ContactForm.module.css","services/fetchContacts.js","redux/contacts/contactSelectors.js","components/Alert/Alert.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsViews.js"],"names":["module","exports","axios","defaults","baseURL","fetchContacts","dispatch","contactAction","fetchContactsRequest","get","then","res","fetchContactsSuccess","data","catch","error","fetchContactsError","addContact","name","number","addContactsRequest","post","addContactsSuccess","addContactsError","removeContacts","id","removeContactsRequest","delete","removeContactsSuccess","removeContactsError","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","contact","toLowerCase","includes","getContactByID","_","contactId","find","connect","prop","length","isContact","nameContact","text","CSSTransition","in","appear","timeout","classNames","unmountOnExit","className","INITIAL_CONTACT_STATE","numberContact","ContactForm","inputName","target","setState","value","inputNumber","handleSubmit","e","preventDefault","onAddContact","props","this","filtered","itemsArray","map","onSubmit","style","Contact_form","type","onChange","placeholder","pattern","Component","contactSelectors","contactOperations","onDeleteContact","contactOperation","onClick","listNull","TransitionGroup","component","key","mapDispatchToProps","inputFilter","contactActions","changeFilter","ContactsViews","onFetchContacts","isLoadingContacts","contactsOperation"],"mappings":"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","file":"static/js/3.f1188a2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact_form\":\"ContactForm_Contact_form__2zU6_\"};","import axios from \"axios\";\r\nimport contactAction from \"../redux/contacts/contactAction\";\r\n\r\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactAction.fetchContactsRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then((res) => {\r\n      dispatch(contactAction.fetchContactsSuccess(res.data));\r\n    })\r\n    .catch((error) => dispatch(contactAction.fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => (dispatch) => {\r\n  dispatch(contactAction.addContactsRequest());\r\n  axios\r\n    .post(\"/contacts\", { name, number })\r\n    .then(({ data }) => dispatch(contactAction.addContactsSuccess(data)))\r\n    .catch((error) => dispatch(contactAction.addContactsError(error)));\r\n};\r\n\r\nconst removeContacts = (id) => (dispatch) => {\r\n  dispatch(contactAction.removeContactsRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactAction.removeContactsSuccess(id)))\r\n    .catch((error) => dispatch(contactAction.removeContactsError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  removeContacts,\r\n};\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getLoading = (state) => state.contacts.loading;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n\r\nconst getContactByID = createSelector(\r\n  [(_, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => contacts.find((contact) => contact.id === contactId)\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getContacts,\r\n  getContactByID,\r\n};\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./alert.css\";\r\n\r\nconst Alert = ({ text }) => (\r\n  <CSSTransition\r\n    in={true}\r\n    appear={true}\r\n    timeout={500}\r\n    classNames=\"anim\"\r\n    unmountOnExit\r\n  >\r\n    <div className=\"alert\">{text}</div>\r\n  </CSSTransition>\r\n);\r\n\r\nconst mapStateToProps = (state, prop) => {\r\n  const { items } = state.contacts;\r\n\r\n  if (items.length > 4) {\r\n    return { isContact: true, nameContact: 10 };\r\n  }\r\n  return { isContact: false };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Alert);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactOperations from \"../../services/fetchContacts\";\r\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\r\nimport Alert from \"../Alert/Alert\";\r\n\r\nimport style from \"./ContactForm.module.css\";\r\n\r\nconst INITIAL_CONTACT_STATE = {\r\n  nameContact: \"\",\r\n  numberContact: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = INITIAL_CONTACT_STATE;\r\n\r\n  inputName = ({ target }) => {\r\n    this.setState({\r\n      nameContact: target.value,\r\n    });\r\n  };\r\n\r\n  inputNumber = ({ target }) => {\r\n    this.setState({\r\n      numberContact: target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { nameContact, numberContact } = this.state;\r\n    const { onAddContact } = this.props;\r\n    onAddContact(nameContact, numberContact);\r\n    this.setState({ ...INITIAL_CONTACT_STATE });\r\n  };\r\n\r\n  render() {\r\n    const { nameContact, numberContact } = this.state;\r\n    const { itemsArray } = this.props;\r\n\r\n    const filtered = itemsArray\r\n      .map(({ name }) => name.toLowerCase())\r\n      .includes(nameContact.toLowerCase());\r\n\r\n    return (\r\n      <>\r\n        {filtered && <Alert text=\"Contact already exist\" />}\r\n        <form onSubmit={this.handleSubmit} className={style.Contact_form}>\r\n          <label>\r\n            Name\r\n            <input\r\n              className={style.inputName}\r\n              type=\"text\"\r\n              value={nameContact}\r\n              onChange={this.inputName}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              placeholder=\"XXX-XX-XX\"\r\n              type=\"tel\"\r\n              pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\r\n              value={numberContact}\r\n              onChange={this.inputNumber}\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">ADD CONTACT</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProprs = (state) => ({\r\n  itemsArray: contactSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAddContact: (name, number) =>\r\n      dispatch(contactOperations.addContact({ name, number })),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProprs, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactOperation from \"../../services/fetchContacts\";\r\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\r\nimport \"./ContacList.css\";\r\n\r\nconst ContactListItem = ({ name, number, onDeleteContact }) => (\r\n  <li className=\"phone_Item\">\r\n    <span className=\"phone_name\">{name}</span>\r\n    <span className=\"phone_number\">{number}</span>\r\n    <button type=\"button\" onClick={onDeleteContact}></button>\r\n  </li>\r\n);\r\n\r\nconst mapStateToProps = (state, { id }) => ({\r\n  ...contactSelectors.getContactByID(state, id),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, { id }) => ({\r\n  onDeleteContact: () => dispatch(contactOperation.removeContacts(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport ContactListItem from \"./ContactListItem\";\r\nimport Alert from \"../Alert/Alert\";\r\n\r\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\r\n\r\nimport \"./ContacList.css\";\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  const listNull = contacts.length === 0 ? true : false;\r\n  return (\r\n    <>\r\n      {listNull && <Alert text=\"No have contact\" />}\r\n      <TransitionGroup component=\"ul\" className=\"contact_list\">\r\n        {contacts.map(({ id }) => (\r\n          <CSSTransition key={id} timeout={250} classNames=\"list\">\r\n            <ContactListItem id={id} />\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(ContactList);\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactActions from \"../../redux/contacts/contactAction\";\r\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\r\n\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ value, inputFilter, isContact }) => (\r\n  <>\r\n    {isContact && (\r\n      <CSSTransition\r\n        in={true}\r\n        appear={true}\r\n        classNames=\"find\"\r\n        timeout={500}\r\n        unmountOnExit\r\n      >\r\n        <div className=\"findContact\">\r\n          <p>Find contacts by name or number</p>\r\n          <input\r\n            className=\"inputName\"\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={({ target }) => inputFilter(target.value)}\r\n          />\r\n        </div>\r\n      </CSSTransition>\r\n    )}\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = (state) => {\r\n  if (contactSelectors.getContacts(state).length > 1) {\r\n    return { value: contactSelectors.getFilter(state), isContact: true };\r\n  }\r\n  return { value: contactSelectors.getFilter(state) };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  inputFilter: contactActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport ContactForm from \"../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../components/ContactList/ContactList\";\r\nimport Filter from \"../components/Filter/Filter\";\r\n\r\nimport contactsOperation from \"../services/fetchContacts\";\r\nimport contactSelectors from \"../redux/contacts/contactSelectors\";\r\n\r\nclass ContactsViews extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"phoneBook_container\">\r\n          <CSSTransition\r\n            in={true}\r\n            appear={true}\r\n            classNames=\"title_anim\"\r\n            timeout={500}\r\n            unmountOnExit\r\n          >\r\n            <h1 className=\"title\">Phonebook</h1>\r\n          </CSSTransition>\r\n\r\n          <CSSTransition\r\n            in={true}\r\n            appear={true}\r\n            classNames=\"form_fade\"\r\n            timeout={500}\r\n            unmountOnExit\r\n          >\r\n            <ContactForm />\r\n          </CSSTransition>\r\n          <Filter />\r\n          {this.props.isLoadingContacts && <h1>грузим</h1>}\r\n          <ContactList />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoadingContacts: contactSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperation.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsViews);\r\n"],"sourceRoot":""}